---
import type { HTMLAttributes } from "astro/types";
import type { CollectionEntry } from "astro:content";
import moment from "moment";
import Clickable from "@/components/Clickable.astro";
import { blogUrl, categoryUrl, tagUrl } from "@/utils/url";
import MarkdownText from "./MarkdownText.astro";
type Props = HTMLAttributes<"div"> & {
  posts: CollectionEntry<"blog">[];
};

const { posts, class: className, ...props } = Astro.props;

const sortedPosts = posts.sort((a, b) => {
  return b.data.date.getTime() - a.data.date.getTime();
});

const years = new Map<number, CollectionEntry<"blog">[]>();

for (const post of sortedPosts) {
  const year = post.data.date.getFullYear();
  if (!years.has(year)) {
    years.set(year, []);
  }
  years.get(year)!.push(post);
}
---

<div class=`posts-list-simple ${className}` {...props}>
  {
    years.entries().map(([year, posts]) => (
      <section class="year-section">
        <div class="flex items-center gap-4">
          <h2 class="year my-2 text-2xl font-bold">{year}</h2>
          <span class="badge badge-primary font-sans text-sm">
            {posts.length} posts
          </span>
        </div>
        <ul class="posts-list">
          {posts.map((post, index) => (
            <li class="one-post flex gap-2 md:gap-4 py-3 px-2 hover:bg-primary/10 transition">
              <div class="post-date text-base-content/60 text-sm flex-[0_0_auto]">
                <time datetime={post.data.date.toISOString()}>
                  {moment(post.data.date).format("MM-DD")}
                </time>
              </div>
              <Clickable
                class="post-box w-full rounded-sm"
                aria-label={`Read ${post.data.title || "this article"}`}
                href={blogUrl(post)}
              >
                <p>
                  <a class="text-sm md:text-base" href={blogUrl(post)}>
                    <MarkdownText
                      inline={true}
                      text={
                        post.data.title || post.data.date.toLocaleDateString()
                      }
                    />
                  </a>
                </p>
                <p>
                  {post.data.categories && (
                    <a
                      href={categoryUrl(post.data.categories)}
                      class="category-item-simple hover:underline text-xs text-base-content/60 flex items-center"
                    >
                      {post.data.categories}
                    </a>
                  )}
                  <span class="tags-list text-xs text-base-content/60">
                    {post.data.tags?.map((tag) => (
                      <a
                        class="tag-item-simple hover:underline"
                        href={tagUrl(tag)}
                      >
                        #{tag}
                      </a>
                    ))}
                  </span>
                </p>
              </Clickable>
            </li>
          ))}
        </ul>
      </section>
    ))
  }
</div>
